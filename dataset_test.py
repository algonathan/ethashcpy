from dataset import *
from utils import *


# the results of the test are taken and processed from the file: go-ethereum/consensus/ethash/algorithm_test.go

def go_ints_to_list_of_ints(strr):
    """
    takes a list of ints in go as a string : '[1 2 3 4 5 6 7 8 9]'
    :return: the string into a python int list: [1, 2, 3, 4, 5,...
    """
    if "\n" in strr:
        strr = ' '.join(line.strip() for line in strr.split("\n"))
        strr = strr.strip()

    return [*map(int, strr.strip()[1:-1].split(" "))]


def tst_seed_hash():
    print("testing seed_hash")
    tst_cases = [
        {
            "epoch": 0,
            "result_in_go_code": "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]"
        },
        {
            "epoch": 1,
            "result_in_go_code": "[41 13 236 217 84 139 98 168 214 3 69 169 136 56 111 200 75 166 188 149 72 64 8 246 "
                                 "54 47 147 22 14 243 229 99] "
        },
    ]
    for tst in tst_cases:
        round = tst["epoch"] * EPOCH_LENGTH + 1
        result = seed_hash(round)
        result_as_int_list = [x for x in result]
        if result_as_int_list == go_ints_to_list_of_ints(tst["result_in_go_code"]):
            continue
        raise Exception("Test failed", tst)


def tst_create_cache():
    print("testing create_cache")
    tst_cases = [
        {
            "epoch": 0,
            "size": 1024,
            "result_in_go_code": """[479847036 4101709717 297517508 133072792 867507847 3096935325 3347418712 
            3851476546 3193699770 322627948 2596189775 3104695251 2720568733 2202433770 3404288575 1416338193 
            206076297 1922687302 2000160701 455906204 2724587075 4230099453 2435242813 2966311923 3090693869 
            1540694005 120143977 2671531587 780314767 1696864609 715194741 2374675375 3126852488 345876963 1728455801 
            104495150 2034371220 3157793947 3059577128 531725523 3810814879 3713195142 3630901388 329805763 
            1212481247 3161388457 1804004030 579728962 3836359276 1017288150 1962748075 3266335663 202951919 
            197962986 50407470 1017157584 252648221 845139494 4181197481 1173768636 4179493083 3558030797 1106789191 
            924504570 1644964346 4148322497 562648835 1368984563 716069446 3571099124 3611390778 1344775860 
            2758101397 4131003514 2503269432 2603275972 1748075691 335674569 3523189991 24871602 2685129589 563045716 
            4067202126 229917516 2969273139 3842520137 874789317 3485147594 4211941443 1030843527 2467502112 
            4102399055 2445633415 164578647 266121606 1215817011 3795732671 2368009391 3223209726 1645431376 
            251789700 1480074946 1378848586 792436998 3348641827 481450371 1291986562 3750984202 2193798750 
            1509998525 2118757194 1193832201 3994863478 2401932119 1802346424 179716999 2306122574 3768751258 
            3319077106 4224587864 1388875799 2749068954 1158658846 3020543890 835880853 2631102585 3709366024 
            3650175524 1880546286 904090462 1337823493 896161524 202353813 291392482 990068010 3933150149 1831440906 
            543064042 3169218239 2407955764 960240090 1202821979 2673499877 1105710951 1769859710 3512407451 
            1293943864 4203866871 1206143378 1374936397 426833800 505445830 131534924 2463390364 4194245287 
            3920051362 461224448 1882370014 3012447569 176859998 666340209 1983376186 3985221007 3206525066 
            3958646592 685882075 1598562002 404757510 3821181754 131783454 2637055015 3775916888 3775874200 
            1999560857 2579101632 1291317619 1369049289 1254725291 1785648772 170757028 3048031045 2583923111 
            900966186 281642442 3369322278 2924731028 3280486710 2398589693 964743169 1940161688 779725445 3658224952 
            772498088 4215392958 2210100167 1299340923 1474212462 2374342925 1893324784 58850151 2270631858 
            2538631995 3929759155 1506005391 1017571497 1824997397 2379187351 1553555095 3103884407 3865456202 
            2060860057 719121619 2675382219 1751164958 2979195943 2358211100 71265595 99477155 1994228223 2505497813 
            3161916325 380590611 3077099377 2471768400 22111340 305386852 1950432447 2065922572 2717186565 2508897681 
            2366044890 628159420 5861980 1335057614 3484286518 2087214053 3245606212 3526979568 1029023751 610932025 
            4251213700 2243634307 3732482353 1693938861 2876925897 3558506633 3237029881 2413957647 3022733858 
            2530279490 2008259229 2634640349 583261126 2988544814 2387601601 477300527] """
        },
        # {
        # "epoch": 1,
        # },
    ]
    for tst in tst_cases:
        round = tst["epoch"] * EPOCH_LENGTH + 1
        result = create_cache(tst["size"], seed_hash(round))
        result_as_int_list = [item for sublist in result for item in sublist]

        if result_as_int_list == go_ints_to_list_of_ints(tst["result_in_go_code"]):
            continue
        raise Exception("Test failed", tst)


if __name__ == '__main__':
    tst_seed_hash()
    tst_create_cache()
