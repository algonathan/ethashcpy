import json

from dataset import *
from utils import *


# the results of the test are taken and processed from the file: go-ethereum/consensus/ethash/algorithm_test.go


def tst_seed_hash():
    print("testing seed_hash")
    tst_cases = [
        {
            "epoch": 0,
            "result_in_go_code": "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]"
        },
        {
            "epoch": 1,
            "result_in_go_code": "[41 13 236 217 84 139 98 168 214 3 69 169 136 56 111 200 75 166 188 149 72 64 8 246 "
                                 "54 47 147 22 14 243 229 99] "
        },
    ]
    for tst in tst_cases:
        round = tst["epoch"] * EPOCH_LENGTH + 1
        result = seed_hash(round)
        result_as_int_list = [x for x in result]
        if result_as_int_list == go_ints_to_list_of_ints(tst["result_in_go_code"]):
            continue
        raise Exception("Test failed", tst)
    print(".....passed")


def tst_create_cache():
    print("testing create_cache")
    tst_cases = [
        {
            "epoch": 0,
            "size": 1024,
            "result_in_go_code": """[479847036 4101709717 297517508 133072792 867507847 3096935325 3347418712 
            3851476546 3193699770 322627948 2596189775 3104695251 2720568733 2202433770 3404288575 1416338193 
            206076297 1922687302 2000160701 455906204 2724587075 4230099453 2435242813 2966311923 3090693869 
            1540694005 120143977 2671531587 780314767 1696864609 715194741 2374675375 3126852488 345876963 1728455801 
            104495150 2034371220 3157793947 3059577128 531725523 3810814879 3713195142 3630901388 329805763 
            1212481247 3161388457 1804004030 579728962 3836359276 1017288150 1962748075 3266335663 202951919 
            197962986 50407470 1017157584 252648221 845139494 4181197481 1173768636 4179493083 3558030797 1106789191 
            924504570 1644964346 4148322497 562648835 1368984563 716069446 3571099124 3611390778 1344775860 
            2758101397 4131003514 2503269432 2603275972 1748075691 335674569 3523189991 24871602 2685129589 563045716 
            4067202126 229917516 2969273139 3842520137 874789317 3485147594 4211941443 1030843527 2467502112 
            4102399055 2445633415 164578647 266121606 1215817011 3795732671 2368009391 3223209726 1645431376 
            251789700 1480074946 1378848586 792436998 3348641827 481450371 1291986562 3750984202 2193798750 
            1509998525 2118757194 1193832201 3994863478 2401932119 1802346424 179716999 2306122574 3768751258 
            3319077106 4224587864 1388875799 2749068954 1158658846 3020543890 835880853 2631102585 3709366024 
            3650175524 1880546286 904090462 1337823493 896161524 202353813 291392482 990068010 3933150149 1831440906 
            543064042 3169218239 2407955764 960240090 1202821979 2673499877 1105710951 1769859710 3512407451 
            1293943864 4203866871 1206143378 1374936397 426833800 505445830 131534924 2463390364 4194245287 
            3920051362 461224448 1882370014 3012447569 176859998 666340209 1983376186 3985221007 3206525066 
            3958646592 685882075 1598562002 404757510 3821181754 131783454 2637055015 3775916888 3775874200 
            1999560857 2579101632 1291317619 1369049289 1254725291 1785648772 170757028 3048031045 2583923111 
            900966186 281642442 3369322278 2924731028 3280486710 2398589693 964743169 1940161688 779725445 3658224952 
            772498088 4215392958 2210100167 1299340923 1474212462 2374342925 1893324784 58850151 2270631858 
            2538631995 3929759155 1506005391 1017571497 1824997397 2379187351 1553555095 3103884407 3865456202 
            2060860057 719121619 2675382219 1751164958 2979195943 2358211100 71265595 99477155 1994228223 2505497813 
            3161916325 380590611 3077099377 2471768400 22111340 305386852 1950432447 2065922572 2717186565 2508897681 
            2366044890 628159420 5861980 1335057614 3484286518 2087214053 3245606212 3526979568 1029023751 610932025 
            4251213700 2243634307 3732482353 1693938861 2876925897 3558506633 3237029881 2413957647 3022733858 
            2530279490 2008259229 2634640349 583261126 2988544814 2387601601 477300527] """
        },
        {
            "epoch": 1,
            "size": 1024,
            "result_in_go_code": """[1569019423 140168281 2609455191 429946691 2495486607 1493075341 873389088 
            822705259 3857239481 3729905473 1966222139 2931796688 3574161969 3633812103 2700646845 3755264307 
            47295797 73682591 81076896 3827532027 2846591273 861513349 1922830512 1447265560 2202609913 2547967945 
            672684510 1670067374 3631807697 1930778843 1709233220 584384304 2153807708 2499760596 3720486550 
            3638962334 605047067 3178063697 166817483 696983116 3557353703 2930060155 4037750197 3759038221 
            2304905612 2171467211 1439360306 543309180 2242159451 4255886393 2663949132 2389092922 3958046500 
            1779675294 2796078495 2916464246 3982366582 1157276064 2438332341 2135662087 3060340056 2903909576 
            3923215051 1742700585 46417954 3202814784 2828128082 2103611684 3984616862 3087693730 3787828523 
            2754858272 4153754824 2524165400 3885495208 2910783639 4031838849 1910175202 2820016356 2522538845 
            911332156 1539573065 637474353 2722307461 2771000778 1141421261 2364517133 3247404887 1136593030 
            4252961821 563766327 2426256295 2191324126 2950392086 1644321814 150687043 309986653 1501186782 
            2482777597 63056156 1224190833 2321652662 3011892379 3395695099 2127746004 2862023135 2343751358 
            3742066582 3508932354 1247189947 1725465263 3570859965 3800689178 3517256971 498092582 3267319317 
            369649314 671733257 1691970337 2112895072 3386703593 2976561394 3631971760 148873611 714856627 453020103 
            4062422856 3082608151 2734883593 3586216175 3329596121 1076620352 3762925850 1031082341 4257892748 
            2921933278 3231506529 647836144 517105960 4111244973 3689098751 1335491565 774718258 2186060874 494420604 
            67008276 2574387178 1668118414 1047280694 3360828893 2636926363 265932169 1093352355 2398610376 199847920 
            1975868623 849359725 1098148849 2242423361 986428459 2469099840 1852677192 3962946134 644653898 
            1786157886 889170509 2674977458 4011491743 3211102793 4260306364 3519347766 1597252513 2062908332 
            2483270943 2312256644 4291274358 3103224062 2860839896 2529812998 2024313420 2134503308 406183423 
            1570980379 1926076509 2664479556 3616024704 439468271 1628016357 90334691 1440500703 4101845311 
            3404000694 2744410756 176417834 2891623089 565737550 4251999427 904671093 4181407550 2003723710 
            3155231066 3957325758 1364377043 1772059602 441887345 2574963243 3811318742 641162390 1396904222 
            152806374 2017464116 3469125816 807531631 284338279 4287297312 726109007 821501552 3884764074 463695488 
            4175997716 1466162671 865937866 1129233562 3511300794 451667695 2098425434 4140396202 479408318 
            1151953059 170577871 1722415401 1190168641 2349297518 3802103604 3532233322 2976027650 1257391506 
            3400419278 1526230734 464754254 2953725791 1969445910 1562677227 1381868112 2656443933 3469487419 
            3142739810 619112998 3893446050 2870978609 2443679848 625385303 1363724916 377575654 3434888521 
            3319820848]""",
        }
    ]
    for tst in tst_cases:
        round = tst["epoch"] * EPOCH_LENGTH + 1
        cache = generate_cache(tst["size"], seed_hash(round))
        if cache == go_ints_to_list_of_ints(tst["result_in_go_code"]):
            continue
        raise Exception("Test failed", tst)
    print(".....passed")


def tst_generate_dataset_item():
    print("Testing generate_dataset_item")
    tst_cases = [
        {
            "epoch": 0,
            "size": 1024,
            "result_in_go_code": """[218 95 157 150 136 199 195 58 183 184 170 206 87 14 66 47 164 139 36 101 155 114 
            252 83 70 105 32 157 102 56 156 161 91 9 156 86 4 96 30 117 129 72 142 59 214 146 92 236 15 18 212 101 
            248 0 77 79 168 71 147 248 225 228 106 27]"""
        },
        {
            "epoch": 1,
            "size": 1024,
            "result_in_go_code": """[224 149 149 44 45 10 246 70 13 132 212 146 62 77 113 123 50 165 158 5 205 78 32 
                    79 27 158 128 75 7 208 209 11 22 105 179 149 88 153 42 120 39 31 148 182 46 44 117 86 33 195 6 103 30 251 
                    217 196 236 248 233 128 66 123 42 196] """
        },
        {
            "epoch": 2,
            "size": 1024,
            "result_in_go_code": """[235 145 237 75 39 171 29 144 62 226 92 216 25 231 130 19 242 65 95 186 101 120 
            181 24 96 229 118 112 37 102 218 41 199 109 9 169 225 167 166 28 214 114 242 114 140 251 150 123 213 136 
            21 169 141 169 221 139 246 69 66 152 130 73 77 115] """
        },
    ]
    for tst in tst_cases:
        round = tst["epoch"] * EPOCH_LENGTH + 1
        cache = generate_cache(tst["size"], seed_hash(round))
        dataset_item = generate_dataset_item(cache, round)
        dataset_item = [x for x in dataset_item]  # into int list
        wanted = go_ints_to_list_of_ints(tst["result_in_go_code"])
        if dataset_item == wanted:
            continue
        raise Exception("Test failed", tst)
    print(".....passed")


def tst_create_large_cache():
    print("Testing create_large_cache")

    rnd = 1
    seed = seed_hash(rnd)
    size = compute_cache_size(rnd)
    print("...creating cache of size", size)
    cache = generate_cache(size, bytearray([0] * 32))
    print("...comparing results")
    with open("large_cache_test.json", "r") as f:
        ls = json.load(f)
        if cache != ls:
            raise Exception("Bad!")


if __name__ == '__main__':
    # tst_seed_hash()
    # tst_create_cache()
    # tst_generate_dataset_item()
    tst_create_large_cache()
